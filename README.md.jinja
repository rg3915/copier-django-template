A Django project using Django Ninja for API development.

Version: **1.1**

## This project made with:

* [Python 3.13.3](https://www.python.org/)
* [Django 5.2](https://www.djangoproject.com/)
* [Django-Ninja 1.4.0](https://django-ninja.dev/)


## Setup

1. Create a virtual environment:
```bash
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```

2. Install requirements:
```bash
pip install -r requirements.txt
```

3. Create .env:
```bash
cp env.sample .env
```

4. Run migrations:
```bash
python manage.py migrate
```

5. Create super user:
```bash
python manage.py createsuperuser
```

6. Start the development server:
```bash
python manage.py runserver
```

## API Documentation

API documentation is available at `/api/docs`

## Ninja Scaffold Command

This template includes a powerful Django management command to quickly scaffold apps with models and APIs.

**Create a new model with fields:**

```bash
python manage.py ninja_scaffold crm Person name:charfield email:emailfield age:integerfield
```

**Create model with relationships:**

```bash
python manage.py ninja_scaffold crm Provider name:charfield email:charfield person:foreignkey
```

**Generate schemas, API and admin from existing model:**

```bash
python manage.py ninja_scaffold --generate-from-model crm Person
```

**Supported field types:**
- Basic: `charfield`, `textfield`, `integerfield`, `booleanfield`
- Numbers/Dates: `decimalfield`, `datefield`, `datetimefield`
- Special: `emailfield`, `urlfield`, `slugfield`, `uuidfield`
- Files: `filefield`, `imagefield`
- Advanced: `jsonfield`, `foreignkey`, `manytomanyfield`, `onetoone`

**The command automatically generates:**
- `models.py` - Django model with specified fields
- `schemas.py` - Django Ninja schemas (input/output)
- `api.py` - Complete CRUD routes (GET, POST, PATCH, DELETE)
- `admin.py` - Django admin interface
- `apps.py` - App configuration (if doesn't exist)

## pt-br

Um projeto Django usando Django Ninja para desenvolvimento de APIs.

## Este projeto foi feito com:

* [Python 3.13.3](https://www.python.org/)
* [Django 5.2](https://www.djangoproject.com/)
* [Django-Ninja 1.4.0](https://django-ninja.dev/)


## Configuração

1. Crie um ambiente virtual:
```bash
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\Scripts\activate
```

2. Instale as dependências:
```bash
pip install -r requirements.txt
```

3. Crie o arquivo .env:
```bash
cp env.sample .env
```

4. Rode as migrações:
```bash
python manage.py migrate
```

5. Crie um super usuário:
```bash
python manage.py createsuperuser
```

6. Inicie o servidor de desenvolvimento:
```bash
python manage.py runserver
```

## Documentação da API

A documentação da API está disponível em `/api/docs`

## Comando Ninja Scaffold

Este template inclui um poderoso comando de gerenciamento Django para criar rapidamente apps com models e APIs.

**Criar um novo model com campos:**

```bash
python manage.py ninja_scaffold crm Person name:charfield email:emailfield age:integerfield
```

**Criar model com relacionamentos:**

```bash
python manage.py ninja_scaffold crm Provider name:charfield email:charfield person:foreignkey
```

**Gerar schemas, API e admin de um model existente:**

```bash
python manage.py ninja_scaffold --generate-from-model crm Person
```

**Tipos de campos suportados:**
- Básicos: `charfield`, `textfield`, `integerfield`, `booleanfield`
- Números/Datas: `decimalfield`, `datefield`, `datetimefield`
- Especiais: `emailfield`, `urlfield`, `slugfield`, `uuidfield`
- Arquivos: `filefield`, `imagefield`
- Avançados: `jsonfield`, `foreignkey`, `manytomanyfield`, `onetoone`

**O comando gera automaticamente:**
- `models.py` - Model Django com os campos especificados
- `schemas.py` - Schemas do Django Ninja (input/output)
- `api.py` - Rotas CRUD completas (GET, POST, PATCH, DELETE)
- `admin.py` - Interface de administração Django
- `apps.py` - Configuração da app (se não existir)
